{"version":3,"sources":["utils/logger.js"],"names":["logger","log4js","getLogger","level","blockLog","content","type","borderIcon","paddingHeight","paddingWidth","width","sort","a","b","length","height","Array","forEach","line","index","instance","repeat","currentLine","paddingFloat","padding","Math","ceil"],"mappings":"sNAAA;AACA,4B;;AAEA,MAAMA,MAAM,GAAGC,gBAAOC,SAAP,EAAf;AACAF,MAAM,CAACG,KAAP,GAAe,oBAAU,OAAV,GAAoB,MAAnC;;AAEO,SAASC,QAAT;AACLC,OADK;AAELC,IAAI,GAAG,MAFF;AAGLC,UAAU,GAAG,GAHR;AAILC,aAAa,GAAG,CAJX;AAKLC,YAAY,GAAG,CALV;AAML;AACA,MAAI,OAAOJ,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,IAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;AACD,QAAMK,KAAK,GAAGL,OAAO,CAACM,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAGD,CAA3B,EAA8B,CAA9B,EAAiCE,MAAjC,GAA0CL,YAAY,GAAG,CAAvE;AACA,QAAMM,MAAM,GAAGV,OAAO,CAACS,MAAR,GAAiBN,aAAa,GAAG,CAAhD;AACA,GAAC,GAAGQ,KAAK,CAACD,MAAM,GAAG,CAAV,CAAT,EAAuBE,OAAvB,CAA+B,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B;AACxD,QAAID,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAKC,QAAQ,CAACN,MAAT,GAAkB,CAA/C,EAAkD;AAChDd,MAAAA,MAAM,CAACM,IAAD,CAAN,CAAaC,UAAU,CAACc,MAAX,CAAkBX,KAAK,GAAG,CAA1B,CAAb;AACD,KAFD,MAEO,IAAIS,KAAK,IAAIX,aAAT,IAA0BW,KAAK,GAAGJ,MAAM,GAAGP,aAA/C,EAA8D;AACnER,MAAAA,MAAM,CAACM,IAAD,CAAN,CAAc,GAAEC,UAAW,GAAE,IAAIc,MAAJ,CAAWX,KAAX,CAAkB,GAAEH,UAAW,EAA5D;AACD,KAFM,MAEA;AACL,YAAMe,WAAW,GAAGjB,OAAO,CAACc,KAAK,GAAG,CAAR,GAAYX,aAAb,CAA3B;AACA,YAAMe,YAAY,GAAG,CAACb,KAAK,GAAGY,WAAW,CAACR,MAArB,IAA+B,CAApD;AACA,YAAMU,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUH,YAAV,CAAhB;AACAvB,MAAAA,MAAM,CAACM,IAAD,CAAN;AACG,SAAEC,UAAW,GAAE,IAAIc,MAAJ;AACdG,MAAAA,OAAO,GAAGD,YAAV,GAAyB,CAAzB,GAA6BC,OAAO,GAAG,CAAvC,GAA2CA,OAD7B;AAEd,SAAEF,WAAY,GAAE,IAAID,MAAJ,CAAWG,OAAX,CAAoB,GAAEjB,UAAW,EAHrD;;AAKD;AACF,GAfD;AAgBD,C;;AAEcP,M","sourcesContent":["import log4js from 'log4js';\nimport { isDev } from './env';\n\nconst logger = log4js.getLogger();\nlogger.level = isDev() ? 'debug' : 'info';\n\nexport function blockLog(\n  content,\n  type = 'info',\n  borderIcon = '#',\n  paddingHeight = 3,\n  paddingWidth = 3\n) {\n  if (typeof content === 'string') {\n    content = [content];\n  }\n  const width = content.sort((a, b) => b - a)[0].length + paddingWidth * 2;\n  const height = content.length + paddingHeight * 2;\n  [...Array(height + 2)].forEach((line, index, instance) => {\n    if (index === 0 || index === instance.length - 1) {\n      logger[type](borderIcon.repeat(width + 2));\n    } else if (index <= paddingHeight || index > height - paddingHeight) {\n      logger[type](`${borderIcon}${' '.repeat(width)}${borderIcon}`);\n    } else {\n      const currentLine = content[index - 1 - paddingHeight];\n      const paddingFloat = (width - currentLine.length) / 2;\n      const padding = Math.ceil(paddingFloat);\n      logger[type](\n        `${borderIcon}${' '.repeat(\n          padding - paddingFloat > 0 ? padding - 1 : padding\n        )}${currentLine}${' '.repeat(padding)}${borderIcon}`\n      );\n    }\n  });\n}\n\nexport default logger;\n"],"file":"logger.js","sourceRoot":"/Users/zcwsr/my/japari-admin/src"}