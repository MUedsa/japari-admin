{"version":3,"sources":["services/redis-service.js"],"names":["RedisService","connect","Promise","resolve","reject","redis","Redis","port","Config","REDIS","REDIS_PORT","host","password","REDIS_PW","db","enableReadyCheck","retryStrategy","times","logger","error","Error","on","e","code","address","info","set","key","value","debug","get"],"mappings":"0IAAA;AACA;AACA,iE;;AAEA,MAAMA,YAAN,CAAmB;AACjBC,EAAAA,OAAO,GAAG;AACR,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKC,KAAL,GAAa,IAAIC,gBAAJ,CAAU;AACrBC,QAAAA,IAAI,EAAEC,gBAAOC,KAAP,CAAaC,UADE;AAErBC,QAAAA,IAAI,EAAE,WAFe;AAGrBC,QAAAA,QAAQ,EAAEJ,gBAAOC,KAAP,CAAaI,QAHF;AAIrBC,QAAAA,EAAE,EAAE,CAJiB;AAKrBC,QAAAA,gBAAgB,EAAE,IALG;AAMrBC,QAAAA,aAAa,EAAGC,KAAD,IAAW;AACxB,cAAIA,KAAK,GAAG,EAAZ,EAAgB;AACdC,4BAAOC,KAAP,CAAa,oCAAb;AACAf,YAAAA,MAAM,CAAC,IAAIgB,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACA,mBAAO,KAAP;AACD;AACD,iBAAOH,KAAP;AACD,SAboB,EAAV,CAAb;;AAeA,WAAKZ,KAAL,CAAWgB,EAAX,CAAc,OAAd,EAAwBC,CAAD,IAAO;AAC5BJ,wBAAOC,KAAP,CAAa,cAAb;AACA,YAAIG,CAAC,CAACC,IAAF,KAAW,cAAf,EAA+B;AAC7BL,0BAAOC,KAAP,CAAc,8BAA6BG,CAAC,CAACE,OAAQ,WAAUF,CAAC,CAACf,IAAK,EAAtE;AACD,SAFD,MAEO;AACLW,0BAAOC,KAAP,CAAaG,CAAb;AACD;AACF,OAPD;AAQA,WAAKjB,KAAL,CAAWgB,EAAX,CAAc,OAAd,EAAuB,MAAM;AAC3BH,wBAAOO,IAAP,CAAY,iBAAZ;AACAtB,QAAAA,OAAO;AACR,OAHD;AAID,KA5BM,CAAP;AA6BD;;AAEDuB,EAAAA,GAAG,CAACC,GAAD,EAAMC,KAAN,EAAa;AACdV,oBAAOW,KAAP,CAAc,qBAAoBF,GAAI,EAAtC;AACA,WAAO,KAAKtB,KAAL,CAAWqB,GAAX,CAAeC,GAAf,EAAoBC,KAApB,CAAP;AACD;;AAEDE,EAAAA,GAAG,CAACH,GAAD,EAAM;AACPT,oBAAOW,KAAP,CAAc,kBAAiBF,GAAI,EAAnC;AACA,WAAO,KAAKtB,KAAL,CAAWyB,GAAX,CAAeH,GAAf,CAAP;AACD,GAzCgB,C;;;AA4CJ,IAAI3B,YAAJ,E","sourcesContent":["import Redis from 'ioredis';\nimport Config from '../config';\nimport logger from '../utils/logger';\n\nclass RedisService {\n  connect() {\n    return new Promise((resolve, reject) => {\n      this.redis = new Redis({\n        port: Config.REDIS.REDIS_PORT,\n        host: '127.0.0.1',\n        password: Config.REDIS.REDIS_PW,\n        db: 0,\n        enableReadyCheck: true,\n        retryStrategy: (times) => {\n          if (times > 10) {\n            logger.error('redis reconnect 10 times, shutdown');\n            reject(new Error('connect redis timeout'));\n            return false;\n          }\n          return times;\n        }\n      });\n      this.redis.on('error', (e) => {\n        logger.error('redis error:');\n        if (e.code === 'ECONNREFUSED') {\n          logger.error(`connect refuesed, address: ${e.address}, port: ${e.port}`);\n        } else {\n          logger.error(e);\n        }\n      });\n      this.redis.on('ready', () => {\n        logger.info('redis connected');\n        resolve();\n      });\n    });\n  }\n\n  set(key, value) {\n    logger.debug(`update redis, set ${key}`);\n    return this.redis.set(key, value);\n  }\n\n  get(key) {\n    logger.debug(`get redis, key ${key}`);\n    return this.redis.get(key);\n  }\n}\n\nexport default new RedisService();\n"],"file":"redis-service.js","sourceRoot":"/Users/zcwsr/my/japari-admin/src"}