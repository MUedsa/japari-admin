{"version":3,"sources":["services/qq-service.js"],"names":["QQService","getGroupList","list","axios","post","Config","QQ_SERVER","isGroupOwner","groupId","userId","getGroupUserRole","isGroupAdminOrOwner","roll","meta","group_id","user_id","memberInfo","data","role","e","logger","error","getGroupUserName","nickname","sendPrivateMessage","message","sendGroupMessage","banGroupUser","duration","convertMessageType","event","post_type","message_type"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport logger from '../utils/logger';\nimport Config from '../config';\n\nclass QQService {\n  async getGroupList() {\n    const list = await axios.post(`${Config.QQ_SERVER}/get_group_list`);\n    return list;\n  }\n\n  // 是否为群主\n  async isGroupOwner(groupId, userId) {\n    return (await this.getGroupUserRole(groupId, userId)) === 'owner';\n  }\n\n  // 是否为管理人员\n  async isGroupAdminOrOwner(groupId, userId) {\n    const roll = await this.getGroupUserRole(groupId, userId);\n    return roll === 'admin' || roll === 'owner';\n  }\n\n  async getGroupUserRole(groupId, userId) {\n    try {\n      const meta = await axios.post(`${Config.QQ_SERVER}/get_group_member_info`, {\n        group_id: groupId,\n        user_id: userId\n      });\n      const memberInfo = meta.data.data;\n      if (!memberInfo) return null;\n      if (!memberInfo.user_id) return null;\n      return memberInfo.role;\n    } catch (e) {\n      logger.error(`get group(${groupId}) user(${userId}) role error`);\n      logger.error(e);\n      return null;\n    }\n  }\n\n  async getGroupUserName(groupId, userId) {\n    try {\n      const meta = await axios.post(`${Config.QQ_SERVER}/get_group_member_info`, {\n        group_id: groupId,\n        user_id: userId\n      });\n      const memberInfo = meta.data.data;\n      if (!memberInfo) return null;\n      return memberInfo.nickname;\n    } catch (e) {\n      logger.error(`get group(${groupId}) user(${userId}) name error`);\n      logger.error(e);\n      return null;\n    }\n  }\n\n  sendPrivateMessage(userId, message) {\n    axios.post(`${Config.QQ_SERVER}/send_private_msg`, { user_id: userId, message });\n  }\n\n  sendGroupMessage(groupId, message) {\n    axios.post(`${Config.QQ_SERVER}/send_group_msg`, { group_id: groupId, message });\n  }\n\n  banGroupUser(groupId, userId, duration) {\n    axios.post(`${Config.QQ_SERVER}/set_group_ban`, { group_id: groupId, user_id: userId, duration });\n  }\n\n  /**\n   * 将接收到的postType转换成插件对应的postType\n   * @param {{ post_type, messag_type }} 上报事件\n   * @return {string} 事件类型\n   */\n  convertMessageType(event) {\n    if (event.post_type === 'message') {\n      return event.message_type;\n    }\n    return event.post_type;\n  }\n}\n\nexport default new QQService();\n"],"file":"qq-service.js","sourceRoot":"/Users/zcwsr/my/japari-admin/src"}