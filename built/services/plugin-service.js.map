{"version":3,"sources":["services/plugin-service.js"],"names":["PluginService","plugins","group","private","notice","groupConfigs","defaultGroupConfig","privateConfigs","sortByWeight","pluginA","pluginB","weight","classifyPlugin","plugin","type","logger","debug","push","sort","some","loadGroupPluginConfig","configArray","DBService","getAllGroupPluginConfig","reduce","groupMap","groupId","pluginList","pluginNameString","nameList","split","configMap","name","loadPrivatePluginConfig","map","forEach","loadPlugins","db","info","FileService","getDirFiles","path","resolve","__dirname","file","required","require","default","warn","Plugin","Error","setDBInstance","createTable","init","prev","curr","getPlugins","postType","getGroupConfig","insertGroupPluginConfig","setGroupConfig","groupConfigMap","groupConfigList","Object","keys","updateGroupPluginConfig","getConfig","group_id"],"mappings":"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","sourcesContent":["import path from 'path';\nimport FileService from './file-service';\nimport DBService from './db-service';\nimport logger from '../utils/logger';\n\nclass PluginService {\n  plugins = {\n    group: [],\n    private: [],\n    notice: []\n  };\n\n  groupConfigs = {};\n  defaultGroupConfig = [];\n  privateConfigs = [];\n\n  sortByWeight(pluginA, pluginB) {\n    return pluginA.weight - pluginB.weight;\n  }\n\n  classifyPlugin(plugin) {\n    if (plugin.type === 'message' || plugin.type === 'private') {\n      logger.debug(`category is '${plugin.type}', load into private plugin list`);\n      this.plugins.private.push(plugin);\n      this.plugins.private.sort(this.sortByWeight);\n    }\n    if (plugin.type === 'message' || plugin.type === 'group') {\n      logger.debug(`category is '${plugin.type}', load into group plugin list`);\n      this.plugins.group.push(plugin);\n      this.plugins.group.sort(this.sortByWeight);\n    }\n    if (plugin.type === 'notice') {\n      logger.debug(\"category is 'notice', load into notice plugin list\");\n      this.plugins.notice.push(plugin);\n      this.plugins.notice.some(this.sortByWeight);\n    }\n  }\n\n  async loadGroupPluginConfig() {\n    const configArray = (await DBService.getAllGroupPluginConfig()) || [];\n    this.groupConfigs = configArray.reduce(\n      (groupMap, { groupId, pluginList: pluginNameString }) => {\n        const nameList = pluginNameString.split(' ');\n        groupMap[groupId] = nameList.reduce((configMap, name) => {\n          configMap[name] = true;\n          return configMap;\n        }, {});\n        return groupMap;\n      },\n      {}\n    );\n  }\n\n  async loadPrivatePluginConfig() {\n    // 暂时搞成加载全部, 后期改成可配置\n    // TODO 可在config.js 配置是否加载某插件\n    const nameList = this.plugins.private.map(plugin => plugin.name);\n    nameList.forEach((name) => {\n      this.privateConfigs[name] = true;\n    });\n  }\n\n  async loadPlugins(db) {\n    logger.info('======== start load plugin ========');\n    // eslint-disable-next-line no-restricted-syntax\n    for (const file of FileService.getDirFiles(path.resolve(__dirname, '../plugins'))) {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      const required = require(file.path);\n      if (!required || !required.default) {\n        logger.warn('wrong plugin constructor!!!!!, skip');\n        logger.warn(`check file at: ${file.path}`);\n        continue;\n      }\n      const Plugin = required.default;\n      const plugin = new Plugin();\n      if (!plugin.name) throw new Error('plugin require a name');\n      // if (result[plugin.name]) {\n      //   logger.warn(`detect same name plugin '${plugin.name}', overwrite it`);\n      // }\n      plugin.setDBInstance(db);\n      if (plugin.createTable) {\n        logger.debug('create required database');\n        await plugin.createTable();\n      }\n      if (plugin.init) {\n        logger.debug('init plugin');\n        await plugin.init();\n      }\n      this.classifyPlugin(plugin);\n      logger.info(`load plugin '${plugin.name}' complete`);\n    }\n    this.defaultGroupConfig = this.plugins.group.reduce((prev, curr) => {\n      if (curr.default) {\n        prev.push(curr.name);\n      }\n      return prev;\n    }, []);\n    logger.info('======== all plugin loaded ========');\n    logger.info('load group plugin config');\n    await this.loadGroupPluginConfig();\n    logger.info('load private plugin config');\n    await this.loadPrivatePluginConfig();\n  }\n\n  /**\n   * 获取对应postType的所有插件列表\n   * @param { string } postType 上报事件类型\n   * @return {[Plugin]} 插件列表\n   */\n  getPlugins(postType) {\n    return this.plugins[postType] || [];\n  }\n\n  /**\n   * 根据groupId 获取群插件列表\n   * @param {number} groupId 群id\n   * @returns {{ [object]: true }} Map 结构的插件列表\n   */\n  getGroupConfig(groupId) {\n    if (!this.groupConfigs[groupId]) {\n      this.groupConfigs[groupId] = this.defaultGroupConfig.reduce((prev, curr) => {\n        prev[curr] = true;\n        return prev;\n      }, {});\n      DBService.insertGroupPluginConfig(groupId, this.defaultGroupConfig);\n    }\n    return this.groupConfigs[groupId];\n  }\n\n  /**\n   * 根绝groupId 设置群插件列表\n   * @param {number} groupId 群id\n   * @param {{ [object]: true }} groupConfigMap Map 结构插件列表\n   */\n  async setGroupConfig(groupId, groupConfigMap) {\n    this.groupConfigs[groupId] = groupConfigMap;\n    const groupConfigList = Object.keys(groupConfigMap);\n    await DBService.updateGroupPluginConfig(groupId, groupConfigList);\n  }\n\n  /**\n   * 获取配置组\n   * @param {string} type 组名\n   * @param {{ group_id: string }} event 上报事件内容\n   * @returns {{}} 配置组\n   */\n  getConfig(type, { group_id: groupId }) {\n    switch (type) {\n      case 'notice':\n        return groupId ? this.getGroupConfig(groupId) : this.privateConfigs;\n      case 'group':\n        return this.getGroupConfig(groupId);\n      case 'private':\n        return this.privateConfigs;\n      default:\n        return null;\n    }\n  }\n}\n\nexport default new PluginService();\n"],"file":"plugin-service.js","sourceRoot":"/Users/zcwsr/my/japari-admin/src"}