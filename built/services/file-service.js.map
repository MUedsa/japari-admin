{"version":3,"sources":["services/file-service.js"],"names":["FileService","getDirFiles","path","reduce","prev","name","fullPath","isFile","slice","push","getRoutersFromDir","app","logger","info","result","filePath","fileName","Controller","require","default","warn","prefix","replace","routes","mount","use"],"mappings":"2LAAA;AACA;;AAEA;AACA,oD;;AAEA,MAAMA,WAAN,CAAkB;AAChB;;;;AAIAC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,WAAO,qBAAYA,IAAZ,EAAkBC,MAAlB,CAAyB,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC9C,YAAMC,QAAQ,GAAG,mBAAQJ,IAAR,EAAcG,IAAd,CAAjB;AACA,UAAI,kBAASC,QAAT,EAAmBC,MAAnB,MAA+BD,QAAQ,CAACE,KAAT,CAAe,CAAC,CAAhB,MAAuB,IAA1D,EAAgE;AAC9DJ,QAAAA,IAAI,CAACK,IAAL,CAAU;AACRJ,UAAAA,IADQ;AAERH,UAAAA,IAAI,EAAEI,QAFE,EAAV;;AAID;AACD,aAAOF,IAAP;AACD,KATM,EASJ,EATI,CAAP;AAUD;;AAEDM,EAAAA,iBAAiB,CAACR,IAAD,EAAOS,GAAP,EAAY;AAC3BC,oBAAOC,IAAP,CAAa,yBAAwBX,IAAK,GAA1C;AACA,WAAO,KAAKD,WAAL,CAAiBC,IAAjB,EAAuBC,MAAvB,CAA8B,CAACW,MAAD,EAAS,EAAEZ,IAAI,EAAEa,QAAR,EAAkBV,IAAI,EAAEW,QAAxB,EAAT,KAAgD;AACnF;AACA,YAAMC,UAAU,GAAG,CAACC,OAAO,CAACH,QAAD,CAAP,IAAqB,EAAtB,EAA0BI,OAA7C;AACA,UAAI,CAACF,UAAL,EAAiB;AACfL,wBAAOQ,IAAP,CAAa,SAAQL,QAAS,wBAA9B;AACA,eAAOD,MAAP;AACD;AACD,UAAIO,MAAM,GAAG,yBAAOL,QAAQ,CAACM,OAAT,CAAiB,mBAAjB,EAAsC,EAAtC,CAAP,CAAb;AACA,UAAI,CAACD,MAAD,IAAWA,MAAM,KAAK,MAA1B,EAAkC;AAChCA,QAAAA,MAAM,GAAG,GAAT;AACD,OAFD,MAEO;AACLA,QAAAA,MAAM,GAAI,IAAGA,MAAO,EAApB;AACD;AACD,YAAME,MAAM,GAAG,IAAIN,UAAJ,CAAeI,MAAf,EAAuBG,KAAvB,EAAf;AACA,UAAIb,GAAJ,EAAS;AACPA,QAAAA,GAAG,CAACc,GAAJ,CAAQF,MAAR;AACD;AACDT,MAAAA,MAAM,CAACL,IAAP,CAAYc,MAAZ;AACA,aAAOT,MAAP;AACD,KAnBM,EAmBJ,EAnBI,CAAP;AAoBD,GAxCe,C;;;AA2CH,IAAId,WAAJ,E","sourcesContent":["import { readdirSync, statSync } from 'fs';\nimport { resolve } from 'path';\n\nimport logger from '../utils/logger';\nimport { toDash } from '../utils/string-utils';\n\nclass FileService {\n  /**\n   * @param {string} path\n   * @returns {[{path: string, name: string}]}\n   */\n  getDirFiles(path) {\n    return readdirSync(path).reduce((prev, name) => {\n      const fullPath = resolve(path, name);\n      if (statSync(fullPath).isFile() && fullPath.slice(-2) === 'js') {\n        prev.push({\n          name,\n          path: fullPath\n        });\n      }\n      return prev;\n    }, []);\n  }\n\n  getRoutersFromDir(path, app) {\n    logger.info(`load routes from dir '${path}'`);\n    return this.getDirFiles(path).reduce((result, { path: filePath, name: fileName }) => {\n      // eslint-disable-next-line\n      const Controller = (require(filePath) || {}).default;\n      if (!Controller) {\n        logger.warn(`file '${filePath}' export nothing, skip`);\n        return result;\n      }\n      let prefix = toDash(fileName.replace(/-?controller\\.js/i, ''));\n      if (!prefix || prefix === 'main') {\n        prefix = '/';\n      } else {\n        prefix = `/${prefix}`;\n      }\n      const routes = new Controller(prefix).mount();\n      if (app) {\n        app.use(routes);\n      }\n      result.push(routes);\n      return result;\n    }, []);\n  }\n}\n\nexport default new FileService();\n"],"file":"file-service.js","sourceRoot":"/Users/zcwsr/my/japari-admin/src"}