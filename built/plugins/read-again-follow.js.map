{"version":3,"sources":["plugins/read-again-follow.js"],"names":["DEFAULT_GROUP_INFO","message","count","ReadAgainFollow","name","wight","type","shortInfo","info","mute","go","body","groupId","group_id","redisKey","groupInfo","JSON","parse","RedisService","get","set","stringify","logger","QQService","sendGroupMessage"],"mappings":";AACA;AACA;AACA;AACA,iE;;AAEA,MAAMA,kBAAkB,GAAG,EAAEC,OAAO,EAAE,EAAX,EAAeC,KAAK,EAAE,CAAtB,EAA3B,C;;;;;;;;;AASMC,e,WARL,oBAAO,EACNC,IAAI,EAAE,mBADA,EAENC,KAAK,EAAE,EAFD,EAGNC,IAAI,EAAE,OAHA,EAINC,SAAS,EAAE,MAJL,EAKNC,IAAI,EAAE,wBALA,EAMNC,IAAI,EAAE,IANA,EAAP,C,gBAAD,MAQMN,eARN,CAQsB;AACdO,EAAAA,EAAN,CAASC,IAAT,EAAe;AACKC,MAAAA,OADL,GAC0BD,IAD1B,CACLE,QADK,CACcZ,OADd,GAC0BU,IAD1B,CACcV,OADd;AAEb,UAAIA,OAAO,KAAK,MAAhB,EAAwB;AACxB,YAAMa,QAAQ,GAAI,GAAE,KAAI,CAACV,IAAK,IAAGQ,OAAQ,EAAzC;AACA,UAAIG,SAAS,GAAGC,IAAI,CAACC,KAAL,QAAiBC,sBAAaC,GAAb,CAAiBL,QAAjB,CAAjB,MAAgDd,kBAAhE;AACA,UAAIe,SAAS,CAACd,OAAV,KAAsBA,OAA1B,EAAmC;AACjCc,QAAAA,SAAS,GAAG,EAAEd,OAAF,EAAWC,KAAK,EAAE,CAAlB,EAAZ;AACA,cAAMgB,sBAAaE,GAAb,CAAiBN,QAAjB,EAA2BE,IAAI,CAACK,SAAL,CAAeN,SAAf,CAA3B,CAAN;AACA;AACD;AACDA,MAAAA,SAAS,CAACb,KAAV,IAAmB,CAAnB;AACA,UAAI,EAAEa,SAAS,CAACb,KAAV,GAAkB,CAApB,CAAJ,EAA4B;AAC1BoB,wBAAOd,IAAP,CAAa,SAAQI,OAAQ,yBAAwBX,OAAQ,GAA7D;AACAsB,2BAAUC,gBAAV,CAA2BZ,OAA3B,EAAoCX,OAApC;AACA,cAAMiB,sBAAaE,GAAb,CAAiBN,QAAjB,EAA2BE,IAAI,CAACK,SAAL,CAAeN,SAAf,CAA3B,CAAN;AACA,eAAO,OAAP;AACD;AACD,YAAMG,sBAAaE,GAAb,CAAiBN,QAAjB,EAA2BE,IAAI,CAACK,SAAL,CAAeN,SAAf,CAA3B,CAAN,CAjBa;AAkBd;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BoB,C;;AA+BPZ,e","sourcesContent":["// import { withTransaction } from '../decorators/db';\nimport { Plugin } from '../decorators/plugin';\nimport QQService from '../services/qq-service';\nimport RedisService from '../services/redis-service';\nimport logger from '../utils/logger';\n\nconst DEFAULT_GROUP_INFO = { message: '', count: 1 };\n@Plugin({\n  name: 'read-again-follow',\n  wight: 98,\n  type: 'group',\n  shortInfo: '跟随复读',\n  info: '当同一群聊连续出现相同消息三次时, 进行复读',\n  mute: true\n})\nclass ReadAgainFollow {\n  async go(body) {\n    const { group_id: groupId, message } = body;\n    if (message === '[图片]') return;\n    const redisKey = `${this.name}-${groupId}`;\n    let groupInfo = JSON.parse(await RedisService.get(redisKey)) || DEFAULT_GROUP_INFO;\n    if (groupInfo.message !== message) {\n      groupInfo = { message, count: 1 };\n      await RedisService.set(redisKey, JSON.stringify(groupInfo));\n      return;\n    }\n    groupInfo.count += 1;\n    if (!(groupInfo.count % 3)) {\n      logger.info(`group ${groupId} random read follow: '${message}'`);\n      QQService.sendGroupMessage(groupId, message);\n      await RedisService.set(redisKey, JSON.stringify(groupInfo));\n      return 'break';\n    }\n    await RedisService.set(redisKey, JSON.stringify(groupInfo));\n  }\n\n  // @withTransaction\n  // async createTable(trx) {\n  //   if (!(await trx.scheme.hasTable('read-again-follow'))) {\n  //     await trx.scheme.createTable('read-again-follow', (table) => {\n  //       table.bigInteger('group_id').primary();\n  //     });\n  //   }\n  // }\n}\n\nexport default ReadAgainFollow;\n"],"file":"read-again-follow.js","sourceRoot":"/Users/zcwsr/my/japari-admin/src"}