{"version":3,"sources":["plugins/read-again-random.js"],"names":["DEFAULT_RATE","ReadAgainRandom","name","wight","type","shortInfo","info","mute","constructor","groupRandomRateMap","go","body","message","groupId","group_id","randomRate","Math","random","groupRate","getGroupRandomRate","logger","QQService","sendGroupMessage","RedisService","get","setGroupRandomRate","rate","set"],"mappings":"0IAAA;;AAEA;AACA;AACA,iE;;AAEA;AACA,MAAMA,YAAY,GAAG,IAArB;AACA;;;;;;;;;;AAUMC,e,WARL,oBAAO,EACNC,IAAI,EAAE,mBADA,EAENC,KAAK,EAAE,EAFD,EAGNC,IAAI,EAAE,OAHA,EAINC,SAAS,EAAE,MAJL,EAKNC,IAAI,EAAE,wBALA,EAMNC,IAAI,EAAE,IANA,EAAP,C,gBAAD,MAQMN,eARN,CAQsB;AACpBO,EAAAA,WAAW,GAAG;AACZ,SAAKC,kBAAL,GAA0B,EAA1B;AACD;;AAEKC,EAAAA,EAAN,CAASC,IAAT,EAAe;AACLC,MAAAA,OADK,GAC0BD,IAD1B,CACLC,OADK,CACcC,OADd,GAC0BF,IAD1B,CACIG,QADJ;AAEb,YAAMC,UAAU,GAAGC,IAAI,CAACC,MAAL,EAAnB;AACA,YAAMC,SAAS,SAAS,KAAI,CAACC,kBAAL,CAAwBN,OAAxB,CAAxB;AACA,UAAIE,UAAU,GAAGG,SAAjB,EAA4B;AAC1BE,wBAAOd,IAAP,CAAa,SAAQO,OAAQ,wBAAuBD,OAAQ,GAA5D;AACAS,2BAAUC,gBAAV,CAA2BT,OAA3B,EAAoCD,OAApC;AACA,eAAO,OAAP;AACD;AACD,aAAO,IAAP,CATa;AAUd;;AAEKO,EAAAA,kBAAN,CAAyBN,OAAzB,EAAkC;AAChC,UAAIE,UAAU,SAASQ,sBAAaC,GAAb,CAAkB,GAAE,MAAI,CAACtB,IAAK,IAAGW,OAAQ,EAAzC,CAAvB;AACA,UAAI,CAACE,UAAL,EAAiB;AACfA,QAAAA,UAAU,GAAGf,YAAb;AACA,QAAA,MAAI,CAACyB,kBAAL,CAAwBZ,OAAxB,EAAiCb,YAAjC;AACD;AACD,aAAO,CAACe,UAAR,CANgC;AAOjC;;AAEDU,EAAAA,kBAAkB,CAACZ,OAAD,EAAUa,IAAV,EAAgB;AAChC,WAAOH,sBAAaI,GAAb,CAAkB,GAAE,KAAKzB,IAAK,IAAGW,OAAQ,EAAzC,EAA4Ca,IAA5C,CAAP;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCoB,C;;AAyCPzB,e","sourcesContent":["import { Plugin } from '../decorators/plugin';\n// import { withTransaction } from '../decorators/db';\nimport QQService from '../services/qq-service';\nimport RedisService from '../services/redis-service';\nimport logger from '../utils/logger';\n\n// 默认随机复读频率 5%\nconst DEFAULT_RATE = 0.05;\n// const READ_AGAIN_RANDOM_TABLE = 'read-again-random';\n\n@Plugin({\n  name: 'read-again-random',\n  wight: 97,\n  type: 'group',\n  shortInfo: '随机复读',\n  info: '当同一群聊连续出现相同消息三次时, 进行复读',\n  mute: true\n})\nclass ReadAgainRandom {\n  constructor() {\n    this.groupRandomRateMap = {};\n  }\n\n  async go(body) {\n    const { message, group_id: groupId } = body;\n    const randomRate = Math.random();\n    const groupRate = await this.getGroupRandomRate(groupId);\n    if (randomRate < groupRate) {\n      logger.info(`group ${groupId} random read again: '${message}'`);\n      QQService.sendGroupMessage(groupId, message);\n      return 'block';\n    }\n    return null;\n  }\n\n  async getGroupRandomRate(groupId) {\n    let randomRate = await RedisService.get(`${this.name}-${groupId}`);\n    if (!randomRate) {\n      randomRate = DEFAULT_RATE;\n      this.setGroupRandomRate(groupId, DEFAULT_RATE);\n    }\n    return +randomRate;\n  }\n\n  setGroupRandomRate(groupId, rate) {\n    return RedisService.set(`${this.name}-${groupId}`, rate);\n  }\n\n  // @withTransaction\n  // async createTable(trx) {\n  //   if (!(await trx.scheme.hasTable(READ_AGAIN_RANDOM_TABLE))) {\n  //     await trx.scheme.createTable(READ_AGAIN_RANDOM_TABLE, (table) => {\n  //       table.bigInteger('group_id').primary();\n  //       table.double('random_rate');\n  //     });\n  //   }\n  // }\n}\n\nexport default ReadAgainRandom;\n"],"file":"read-again-random.js","sourceRoot":"/Users/zcwsr/my/japari-admin/src"}