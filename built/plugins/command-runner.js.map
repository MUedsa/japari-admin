{"version":3,"sources":["plugins/command-runner.js"],"names":["COMMAND_404","CommandRunner","name","weight","type","shortInfo","info","default","hide","mute","command","private","group","classifyCommand","logger","debug","init","FileService","getDirFiles","path","resolve","__dirname","file","required","require","warn","Command","Error","setDBInstance","DBInstance","createTable","isCommand","content","match","params","trim","groupCommand","body","commandInstance","QQService","sendGroupMessage","group_id","trigger","privateCommand","sendPrivateMessage","user_id","go","message","c","trx","schema","hasTable","table","bigInteger","primary","string","withTransaction"],"mappings":"uWAAA;AACA;AACA;AACA;AACA;AACA,2E;;AAEA,MAAMA,WAAW,GAAG,kCAApB,C;;;;;;;;;;;;AAYMC,a,WAVL,oBAAO,EACNC,IAAI,EAAE,gBADA,EAENC,MAAM,EAAE,EAFF,EAGNC,IAAI,EAAE,SAHA,EAINC,SAAS,EAAE,MAJL,EAKNC,IAAI,EAAE,wBALA,EAMNC,OAAO,EAAE,IANH,EAONC,IAAI,EAAE,IAPA,EAQNC,IAAI,EAAE,IARA,EAAP,C,oCAAD,MAUMR,aAVN,CAUoB;AAClBS,IAAAA,OADkB,GACR;AACRC,MAAAA,OAAO,EAAE,EADD;AAERC,MAAAA,KAAK,EAAE,EAFC,EADQ;;;AAMlB;;;;AAIAC,EAAAA,eAAe,CAACH,OAAD,EAAU;AACvB,QAAIA,OAAO,CAACN,IAAR,KAAiB,KAAjB,IAA0BM,OAAO,CAACN,IAAR,KAAiB,SAA/C,EAA0D;AACxDU,sBAAOC,KAAP,CAAc,YAAWL,OAAO,CAACN,IAAK,mCAAtC;AACA,WAAKM,OAAL,CAAaC,OAAb,CAAqBD,OAAO,CAACA,OAA7B,IAAwCA,OAAxC;AACD;AACD,QAAIA,OAAO,CAACN,IAAR,KAAiB,KAAjB,IAA0BM,OAAO,CAACN,IAAR,KAAiB,OAA/C,EAAwD;AACtDU,sBAAOC,KAAP,CAAc,YAAWL,OAAO,CAACN,IAAK,iCAAtC;AACA,WAAKM,OAAL,CAAaE,KAAb,CAAmBF,OAAO,CAACA,OAA3B,IAAsCA,OAAtC;AACD;AACF;;AAEKM,EAAAA,IAAN,GAAa;AACX,4BAAS,CAAC,eAAD,EAAkB,MAAlB,CAAT,EAAoC,MAApC,EAA4C,GAA5C,EAAiD,CAAjD,EAAoD,EAApD;AACAF,sBAAOR,IAAP,CAAY,uCAAZ;AACA;AAHW,6GAIX,qBAAmBW,qBAAYC,WAAZ,CAAwBC,cAAKC,OAAL,CAAaC,SAAb,EAAwB,UAAxB,CAAxB,CAAnB,8HAAiF,OAAtEC,IAAsE;AAC/E;AACA,gBAAMC,QAAQ,GAAGC,OAAO,CAACF,IAAI,CAACH,IAAN,CAAxB;AACA,cAAI,CAACI,QAAD,IAAa,CAACA,QAAQ,CAAChB,OAA3B,EAAoC;AAClCO,4BAAOW,IAAP,CAAY,sCAAZ;AACAX,4BAAOW,IAAP,CAAa,kBAAiBH,IAAI,CAACH,IAAK,EAAxC;AACA;AACD;AACD,gBAAMO,OAAO,GAAGH,QAAQ,CAAChB,OAAzB;AACA,gBAAMG,OAAO,GAAG,IAAIgB,OAAJ,EAAhB;AACA,cAAI,CAAChB,OAAO,CAACR,IAAb,EAAmB,MAAMyB,KAAK,CAAC,wBAAD,CAAX;AACnBjB,UAAAA,OAAO,CAACkB,aAAR,CAAsB,KAAI,CAACC,UAA3B;AACA,cAAInB,OAAO,CAACoB,WAAZ,EAAyB;AACvBhB,4BAAOC,KAAP,CAAa,iCAAb;AACA,kBAAML,OAAO,CAACoB,WAAR,EAAN;AACD;AACD,cAAIpB,OAAO,CAACM,IAAZ,EAAkB;AAChBF,4BAAOC,KAAP,CAAa,cAAb;AACA,kBAAML,OAAO,CAACM,IAAR,EAAN;AACD;AACD,UAAA,KAAI,CAACH,eAAL,CAAqBH,OAArB;AACAI,0BAAOR,IAAP,CAAa,iBAAgBI,OAAO,CAACA,OAAQ,YAA7C;AACD,SA1BU;AA2BXI,sBAAOR,IAAP,CAAY,uCAAZ,EA3BW;AA4BZ;;AAED;;;;AAIAyB,EAAAA,SAAS,CAACC,OAAD,EAAU;AACjB,QAAIC,KAAK,GAAGD,OAAO,CAACC,KAAR,CAAc,kCAAd,CAAZ;AACA,QAAIA,KAAJ,EAAW;AACgBA,MAAAA,KADhB,qCACA/B,IADA,cACMgC,MADN;AAET,aAAO,EAAEhC,IAAF,EAAQgC,MAAM,EAAEA,MAAM,CAACC,IAAP,EAAhB,EAAP;AACD;AACD;AACAF,IAAAA,KAAK,GAAGD,OAAO,CAACC,KAAR,CAAc,4BAAd,CAAR;AACA,QAAI,CAACA,KAAL,EAAY,OAAO,IAAP;AACZ,WAAO;AACL/B,MAAAA,IAAI,EAAE+B,KAAK,CAAC,CAAD,CADN;AAELC,MAAAA,MAAM,EAAE,EAFH,EAAP;;AAID;;AAEDE,EAAAA,YAAY,CAACC,IAAD,EAAO3B,OAAP,EAAgBN,IAAhB,EAAsB;AAChC,UAAMkC,eAAe,GAAG,KAAK5B,OAAL,CAAaE,KAAb,CAAmBF,OAAO,CAACR,IAA3B,CAAxB;AACA,QAAI,CAACoC,eAAL,EAAsB;AACpBC,yBAAUC,gBAAV,CAA2BH,IAAI,CAACI,QAAhC,EAA0CzC,WAA1C;AACA;AACD;AACDsC,IAAAA,eAAe,CAACI,OAAhB,CAAwBhC,OAAO,CAACwB,MAAhC,EAAwCG,IAAxC,EAA8CjC,IAA9C,EAAoD,KAAKM,OAAL,CAAaE,KAAjE;AACD;;AAED+B,EAAAA,cAAc,CAACN,IAAD,EAAO3B,OAAP,EAAgBN,IAAhB,EAAsB;AAClC,UAAMkC,eAAe,GAAG,KAAK5B,OAAL,CAAaC,OAAb,CAAqBD,OAAO,CAACR,IAA7B,CAAxB;AACA,QAAI,CAACoC,eAAL,EAAsB;AACpBC,yBAAUK,kBAAV,CAA6BP,IAAI,CAACQ,OAAlC,EAA2C7C,WAA3C;AACA;AACD;AACDsC,IAAAA,eAAe,CAACI,OAAhB,CAAwBhC,OAAO,CAACwB,MAAhC,EAAwCG,IAAxC,EAA8CjC,IAA9C,EAAoD,KAAKM,OAAL,CAAaC,OAAjE;AACD;;AAEKmC,EAAAA,EAAN,CAAST,IAAT,EAAejC,IAAf,EAAqB;AACX2C,MAAAA,OADW,GACCV,IADD,CACXU,OADW;AAEnB,YAAMC,CAAC,GAAG,MAAI,CAACjB,SAAL,CAAegB,OAAf,CAAV;AACA,UAAI,CAACC,CAAL,EAAQ,OAHW,CAGH;AAChB,cAAQ5C,IAAR;AACE,aAAK,OAAL;AACE,gBAAM,MAAI,CAACgC,YAAL,CAAkBC,IAAlB,EAAwBW,CAAxB,EAA2B5C,IAA3B,CAAN;AACA;AACF,aAAK,SAAL;AACE,gBAAM,MAAI,CAACuC,cAAL,CAAoBN,IAApB,EAA0BW,CAA1B,EAA6B5C,IAA7B,CAAN;AACA;AACF,gBAPF;;AASA,aAAO,OAAP,CAbmB;AAcpB;;;AAGK0B,EAAAA,WADN,CACkBmB,GADlB,EACuB;AACrB,UAAI,QAAQA,GAAG,CAACC,MAAJ,CAAWC,QAAX,CAAoB,oBAApB,CAAR,CAAJ,EAAwD;AACtD,cAAMF,GAAG,CAACC,MAAJ,CAAWpB,WAAX,CAAuB,oBAAvB,EAA8CsB,KAAD,IAAW;AAC5DA,UAAAA,KAAK,CAACC,UAAN,CAAiB,UAAjB,EAA6BC,OAA7B;AACAF,UAAAA,KAAK,CAACG,MAAN,CAAa,cAAb;AACD,SAHK,CAAN;AAID,OANoB;AAOtB;;AAED;;AAEA;AApHkB,C,wEAwGjBC,mB;;AAeYvD,a;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import path from 'path';\nimport logger, { blockLog } from '../utils/logger';\nimport FileService from '../services/file-service';\nimport { withTransaction } from '../decorators/db';\nimport { Plugin } from '../decorators/plugin';\nimport QQService from '../services/qq-service';\n\nconst COMMAND_404 = \"您所调用的指令不存在尝试使用, '!help'来查看所有可用指令\";\n\n@Plugin({\n  name: 'command-runner',\n  weight: 99,\n  type: 'message',\n  shortInfo: '指令响应',\n  info: \"响应群聊/私聊指令, 指令'!'或'！'开头\",\n  default: true,\n  hide: true,\n  mute: true\n})\nclass CommandRunner {\n  command = {\n    private: {},\n    group: {}\n  };\n\n  /**\n   * 指令分类\n   * @param {any} command 指令对象\n   */\n  classifyCommand(command) {\n    if (command.type === 'all' || command.type === 'private') {\n      logger.debug(`type is '${command.type}', load into private command list`);\n      this.command.private[command.command] = command;\n    }\n    if (command.type === 'all' || command.type === 'group') {\n      logger.debug(`type is '${command.type}', load into group command list`);\n      this.command.group[command.command] = command;\n    }\n  }\n\n  async init() {\n    blockLog(['CommandRunner', 'v1.0'], 'info', '@', 0, 10);\n    logger.info('======== start load command  ========');\n    // eslint-disable-next-line no-restricted-syntax\n    for (const file of FileService.getDirFiles(path.resolve(__dirname, 'commands'))) {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      const required = require(file.path);\n      if (!required || !required.default) {\n        logger.warn('wrong command constructor!!!!!, skip');\n        logger.warn(`check file at: ${file.path}`);\n        continue;\n      }\n      const Command = required.default;\n      const command = new Command();\n      if (!command.name) throw Error('command require a name');\n      command.setDBInstance(this.DBInstance);\n      if (command.createTable) {\n        logger.debug('create command require database');\n        await command.createTable();\n      }\n      if (command.init) {\n        logger.debug('init command');\n        await command.init();\n      }\n      this.classifyCommand(command);\n      logger.info(`load command '${command.command}' complete`);\n    }\n    logger.info('======== all command loaded  ========');\n  }\n\n  /**\n   * 判断是否为指令调用内容, 返回指令和参数\n   * @param {string} content 完整内容\n   */\n  isCommand(content) {\n    let match = content.match(/^[!|\\uff01]([a-zA-Z]{2,})\\s(.*)$/);\n    if (match) {\n      const [, name, params] = match;\n      return { name, params: params.trim() };\n    }\n    // 对无参数指令做分别处理, 防止出现!recent1 类似这样不加空格也能匹配成功的问题\n    match = content.match(/^[!|\\uff01]([a-zA-Z]{2,})$/);\n    if (!match) return null;\n    return {\n      name: match[1],\n      params: ''\n    };\n  }\n\n  groupCommand(body, command, type) {\n    const commandInstance = this.command.group[command.name];\n    if (!commandInstance) {\n      QQService.sendGroupMessage(body.group_id, COMMAND_404);\n      return;\n    }\n    commandInstance.trigger(command.params, body, type, this.command.group);\n  }\n\n  privateCommand(body, command, type) {\n    const commandInstance = this.command.private[command.name];\n    if (!commandInstance) {\n      QQService.sendPrivateMessage(body.user_id, COMMAND_404);\n      return;\n    }\n    commandInstance.trigger(command.params, body, type, this.command.private);\n  }\n\n  async go(body, type) {\n    const { message } = body;\n    const c = this.isCommand(message);\n    if (!c) return; // 不是指令, 直接跳过流程\n    switch (type) {\n      case 'group':\n        await this.groupCommand(body, c, type);\n        break;\n      case 'private':\n        await this.privateCommand(body, c, type);\n        break;\n      default:\n    }\n    return 'break';\n  }\n\n  @withTransaction\n  async createTable(trx) {\n    if (!(await trx.schema.hasTable('group_command_list'))) {\n      await trx.schema.createTable('group_command_list', (table) => {\n        table.bigInteger('group_id').primary();\n        table.string('command_list');\n      });\n    }\n  }\n\n  // async getCommandList() {\n\n  // }\n}\n\nexport default CommandRunner;\n\n// export function loadCommands() {\n//   const cmsDirPath = path.resolve(__dirname, 'commands');\n//   logger.info('================command-loader================');\n//   const cmsFilePath = fs.readdirSync(cmsDirPath)\n//   .map(filename => {\n//     return `${cmsDirPath}/${filename}`;\n//   });\n//   const commands = cmsFilePath.reduce((prev, curr) => {\n//     let cm;\n//     try {\n//       cm = require(curr);\n//       if (cm.name) {\n//         prev[cm.name] = cm;\n//         logger.info(`指令'!${cm.name}' 加载成功`);\n//       } else {\n//         throw new Error(`插件加载失败,缺少必要属性'name'\\n位于: ${curr}`);\n//       }\n//     } catch (e) {\n//       logger.info(e);\n//     }\n//     return prev;\n//   }, {});\n//   logger.info('指令加载完成');\n//   logger.info('================command-loader================');\n//   return commands;\n// }\n"],"file":"command-runner.js","sourceRoot":"/Users/zcwsr/my/japari-admin/src"}