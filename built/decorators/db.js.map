{"version":3,"sources":["decorators/db.js"],"names":["createWithLog","tableName","target","name","descriptor","origin","value","DBInstance","Error","schema","hasTable","logger","info","createTable","bind","e","error","toString","withTransaction","args","transaction","trx","call"],"mappings":"uNAAA,iE;;AAEA;;;AAGO,MAAMA,aAAa,GAAGC,SAAS,IAAI,CAACC,MAAD,EAASC,IAAT,EAAeC,UAAf,KAA8B;AACtE,QAAMC,MAAM,GAAGD,UAAU,CAACE,KAA1B;AACA;AACAF,EAAAA,UAAU,CAACE,KAAX,kCAAmB,aAAiB;AAClC,QAAI;AACF,UAAI,CAAC,KAAKC,UAAV,EAAsB;AACpB,cAAM,IAAIC,KAAJ,CAAU,yEAAV,CAAN;AACD;AACD,gBAAU,KAAKD,UAAL,CAAgBE,MAAhB,CAAuBC,QAAvB,CAAgCT,SAAhC,CAAV,EAAsD;AACpDU,wBAAOC,IAAP,CAAa,UAASX,SAAU,gBAAhC;AACD,OAFD,MAEO;AACLU,wBAAOC,IAAP,CAAa,UAASX,SAAU,eAAhC;AACA,cAAM,KAAKM,UAAL,CAAgBE,MAAhB,CAAuBI,WAAvB,CAAmCZ,SAAnC,EAA8CI,MAAM,CAACS,IAAP,CAAY,IAAZ,CAA9C,CAAN;AACAH,wBAAOC,IAAP,CAAa,UAASX,SAAU,oBAAhC;AACD;AACF,KAXD,CAWE,OAAOc,CAAP,EAAU;AACVJ,sBAAOK,KAAP,CAAc,kCAAiCf,SAAU,SAAzD;AACAU,sBAAOK,KAAP,CAAaD,CAAC,CAACE,QAAF,EAAb;AACA,YAAM,IAAIT,KAAJ,CAAU,kCAAV,CAAN;AACD;AACF,GAjBD;AAkBA,SAAOJ,UAAP;AACD,CAtBM,C;;AAwBA,MAAMc,eAAe,GAAG,CAAChB,MAAD,EAASC,IAAT,EAAeC,UAAf,KAA8B;AAC3D,QAAMC,MAAM,GAAGD,UAAU,CAACE,KAA1B;AACA;AACAF,EAAAA,UAAU,CAACE,KAAX,GAAmB,UAAS,GAAGa,IAAZ,EAAkB;AACnC;AACA,WAAO,KAAKZ,UAAL,CAAgBa,WAAhB,CAA4BC,GAAG,IAAIhB,MAAM,CAACiB,IAAP,CAAY,IAAZ,EAAkBD,GAAlB,EAAuB,GAAGF,IAA1B,CAAnC,CAAP;AACA;AACA;AACA;AACA;AACD,GAPD;AAQA,SAAOf,UAAP;AACD,CAZM,C","sourcesContent":["import logger from '../utils/logger';\n\n/**\n * @param {string} tableName\n */\nexport const createWithLog = tableName => (target, name, descriptor) => {\n  const origin = descriptor.value;\n  // eslint-disable-next-line\n  descriptor.value = async function() {\n    try {\n      if (!this.DBInstance) {\n        throw new Error(\"no db instance, may be your plugin class has not extends class 'Plugin'\");\n      }\n      if (await this.DBInstance.schema.hasTable(tableName)) {\n        logger.info(`table '${tableName}' exists, skip`);\n      } else {\n        logger.info(`table '${tableName}' is creating`);\n        await this.DBInstance.schema.createTable(tableName, origin.bind(this));\n        logger.info(`table '${tableName}' has been created`);\n      }\n    } catch (e) {\n      logger.error(`an error occured during table '${tableName}' check`);\n      logger.error(e.toString());\n      throw new Error('create or check table with Error');\n    }\n  };\n  return descriptor;\n};\n\nexport const withTransaction = (target, name, descriptor) => {\n  const origin = descriptor.value;\n  // eslint-disable-next-line\n  descriptor.value = function(...args) {\n    // try {\n    return this.DBInstance.transaction(trx => origin.call(this, trx, ...args));\n    // } catch (e) {\n    //   logger.error(e);\n    //   return null;\n    // }\n  };\n  return descriptor;\n};\n"],"file":"db.js","sourceRoot":"/Users/zcwsr/my/japari-admin/src"}